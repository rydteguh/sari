services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    platform: linux/amd64
    labels:
      - "app=kafka-stack"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2185
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2185:2185"

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    platform: linux/amd64
    labels:
      - "app=kafka-stack"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2185
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:9092,PLAINTEXT_EXTERNAL://kafka:9093
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:9092,PLAINTEXT_EXTERNAL://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'



  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    platform: linux/amd64
    labels:
      - "app=kafka-stack"
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    image: debezium/connect:1.9
    platform: linux/amd64
    labels:
      - "app=kafka-stack"
    depends_on:
      - kafka
      - schema-registry
      - mysql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: _connect_configs
      OFFSET_STORAGE_TOPIC: _connect_offsets
      STATUS_STORAGE_TOPIC: _connect_statuses
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      REST_ADVERTISED_HOST_NAME: connect
      LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_TIMEOUT_MS: 2000
      SCHEMA_REGISTRY_KAFKASTORE_INIT_TIMEOUT_MS: 30000


  mysql:
    image: mysql:5.7
    platform: linux/amd64
    labels:
      - "app=kafka-stack"
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: demo
      MYSQL_USER: debezium
      MYSQL_PASSWORD: debezium_pass
    command:
      --gtid-mode=ON
      --log-bin=mysql-bin
      --binlog-format=ROW
      --binlog-row-image=FULL
      --server-id=223344
      --enforce-gtid-consistency=ON
    volumes:
      - ./mysql-script/first_migration.sql:/docker-entrypoint-initdb.d/first_migration.sql  # Mount the SQL file directly



  connector-registrator:
    image: curlimages/curl:7.87.0
    platform: linux/amd64
    depends_on:
      - connect
    volumes:
      - ./debezium-mysql-connector.json:/debezium-mysql-connector.json
      - ./scripts/register-connector.sh:/register-connector.sh
    command: ["sh", "/register-connector.sh"]
    restart: "no"
    networks:
      - default


  postgres:
    image: postgres:13
    platform: linux/amd64
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-script/postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql


  conduktor-platform:
    image: conduktor/conduktor-platform
    platform: linux/amd64
    container_name: conduktor-platform
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8087:8080"
    volumes:
      - "./conduktor-script/conduktor-config.yaml:/opt/conduktor/console-config.yaml"
    environment:
      KAFKA_BROKERS: "kafka:9092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CDK_IN_CONF_FILE: /opt/conduktor/console-config.yaml
  
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    platform: linux/amd64
    container_name: clickhouse
    environment:
      - CLICKHOUSE_DB=demo_tables
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=clickhouse
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    volumes:
      - ./clickhouse-script/sql:/docker-entrypoint-initdb.d
    ports:
      - "8123:8123"
      - "9000:9000"
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  airflow:
    build: ./airflow
    image: airflow-build:latest
    container_name: airflow
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=epGmHWw_9SlqNonog5xDBp6IgClxfYqxvTKJyvavGO0=
      - AIRFLOW__WEBSERVER__SECRET_KEY=60a5152d8af7197efa6c821348cf948d67cde9c880375c3b774c48549c739dda
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    command: bash -c "airflow db init && airflow users create --username admin --firstname admin --lastname admin --role Admin --email admin@example.com --password admin && airflow webserver"
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    build: ./airflow
    image: airflow-build:latest
    container_name: airflow-scheduler
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=epGmHWw_9SlqNonog5xDBp6IgClxfYqxvTKJyvavGO0=
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
    command: scheduler
    depends_on:
      - airflow
      - postgres
      - clickhouse
  
  flink:
    build: ./flink
    image: flink-build:latest
    depends_on:
      - kafka
      - clickhouse 
    platform: linux/amd64
    container_name: flink
    ports:
      - "8082:8082"   # Web UI
      - "6123:6123"   # JobManager RPC
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink
        taskmanager.numberOfTaskSlots: 2
        web.upload.dir: /opt/flink/conf
        web.tmpdir: /opt/flink/conf
        high-availability.storageDir: file:///opt/flink/conf
        state.checkpoints.dir: file:///opt/flink/conf/checkpoints
        state.savepoints.dir: file:///opt/flink/conf/savepoints
    volumes:
      - ./path/to/flink-connector-kafka_2.12-1.16.0.jar:/opt/flink/lib/flink-connector-kafka_2.12-1.16.0.jar
    
    # command: jobmanager

volumes:
  postgres_data:
  clickhouse_data:
  clickhouse_logs:
